package io.github.bsayli.customerservice.common.openapi;

import static io.github.bsayli.customerservice.common.openapi.OpenApiSchemas.SCHEMA_PROBLEM_DETAIL;

import io.swagger.v3.oas.models.media.*;
import io.swagger.v3.oas.models.responses.ApiResponse;
import java.util.Map;
import org.springdoc.core.customizers.OpenApiCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
class GlobalErrorResponsesCustomizer {

  private static final String MEDIA_TYPE_PROBLEM_JSON = "application/problem+json";
  private static final String REF_PROBLEM_DETAIL = "#/components/schemas/" + SCHEMA_PROBLEM_DETAIL;

  private static final String STATUS_400 = "400";
  private static final String STATUS_404 = "404";
  private static final String STATUS_500 = "500";

  private static final String DESC_BAD_REQUEST = "Bad Request";
  private static final String DESC_NOT_FOUND = "Not Found";
  private static final String DESC_INTERNAL_ERROR = "Internal Server Error";

  @Bean
  OpenApiCustomizer addDefaultProblemResponses() {
    return openApi -> {
      ensureProblemDetailSchema(openApi.getComponents().getSchemas());

      openApi
          .getPaths()
          .forEach(
              (path, item) ->
                  item.readOperations()
                      .forEach(
                          op -> {
                            var responses = op.getResponses();
                            var problemContent =
                                new Content()
                                    .addMediaType(
                                        MEDIA_TYPE_PROBLEM_JSON,
                                        new MediaType()
                                            .schema(new Schema<>().$ref(REF_PROBLEM_DETAIL)));

                            responses.addApiResponse(
                                STATUS_400,
                                new ApiResponse()
                                    .description(DESC_BAD_REQUEST)
                                    .content(problemContent));
                            responses.addApiResponse(
                                STATUS_404,
                                new ApiResponse()
                                    .description(DESC_NOT_FOUND)
                                    .content(problemContent));
                            responses.addApiResponse(
                                STATUS_500,
                                new ApiResponse()
                                    .description(DESC_INTERNAL_ERROR)
                                    .content(problemContent));
                          }));
    };
  }

  @SuppressWarnings("rawtypes")
  private void ensureProblemDetailSchema(Map<String, Schema> schemas) {
    if (schemas == null) return;

    if (!schemas.containsKey(SCHEMA_PROBLEM_DETAIL)) {
      ObjectSchema pd = new ObjectSchema();

      pd.addProperty(
          "type",
          new StringSchema()
              .format("uri")
              .description("A URI reference that identifies the problem type."));
      pd.addProperty(
          "title",
          new StringSchema().description("A short, human-readable summary of the problem type."));
      pd.addProperty(
          "status",
          new IntegerSchema()
              .format("int32")
              .description("The HTTP status code generated by the origin server."));
      pd.addProperty(
          "detail",
          new StringSchema()
              .description(
                  "A human-readable explanation specific to this occurrence of the problem."));
      pd.addProperty(
          "instance",
          new StringSchema()
              .format("uri")
              .description(
                  "A URI reference that identifies the specific occurrence of the problem."));

      pd.setAdditionalProperties(true);

      schemas.put(SCHEMA_PROBLEM_DETAIL, pd);
    }
  }
}
