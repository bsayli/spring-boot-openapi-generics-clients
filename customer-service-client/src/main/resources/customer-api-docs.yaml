openapi: 3.1.0
info:
  title: Customer Service API
  description: Customer Service API with type-safe generic responses using OpenAPI
  version: 0.6.8
servers:
  - url: http://localhost:8084/customer-service
    description: Local service URL
paths:
  /v1/customers/{customerId}:
    get:
      tags:
        - customer-controller
      operationId: getCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceResponseCustomerDto"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "405":
          description: Method Not Allowed
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
    put:
      tags:
        - customer-controller
      operationId: updateCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerUpdateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceResponseCustomerDto"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "405":
          description: Method Not Allowed
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
    delete:
      tags:
        - customer-controller
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceResponseCustomerDeleteResponse"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "405":
          description: Method Not Allowed
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
  /v1/customers:
    get:
      tags:
        - customer-controller
      operationId: getCustomers
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: email
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 5
            maximum: 10
            minimum: 1
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            default: customerId
            enum:
              - customerId
              - name
              - email
        - name: direction
          in: query
          required: false
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceResponsePageCustomerDto"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "405":
          description: Method Not Allowed
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
    post:
      tags:
        - customer-controller
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerCreateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceResponseCustomerDto"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "405":
          description: Method Not Allowed
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetail"
components:
  schemas:
    CustomerUpdateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 80
          minLength: 2
        email:
          type: string
          format: email
          minLength: 1
      required:
        - email
        - name
    CustomerDto:
      type: object
      properties:
        customerId:
          type: integer
          format: int32
        name:
          type: string
        email:
          type: string
    Meta:
      type: object
      properties:
        serverTime:
          type: string
          format: date-time
        sort:
          type: array
          items:
            $ref: "#/components/schemas/Sort"
    ServiceResponseCustomerDto:
      allOf:
        - $ref: "#/components/schemas/ServiceResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/CustomerDto"
      x-api-wrapper: true
      x-api-wrapper-datatype: CustomerDto
    Sort:
      type: object
      properties:
        field:
          type: string
          enum:
            - customerId
            - name
            - email
        direction:
          type: string
          enum:
            - asc
            - desc
    CustomerCreateRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 80
          minLength: 2
        email:
          type: string
          format: email
          minLength: 1
      required:
        - email
        - name
    PageCustomerDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/CustomerDto"
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
    ServiceResponsePageCustomerDto:
      allOf:
        - $ref: "#/components/schemas/ServiceResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/PageCustomerDto"
      x-api-wrapper: true
      x-api-wrapper-datatype: PageCustomerDto
      x-data-container: Page
      x-data-item: CustomerDto
    CustomerDeleteResponse:
      type: object
      properties:
        customerId:
          type: integer
          format: int32
    ServiceResponseCustomerDeleteResponse:
      allOf:
        - $ref: "#/components/schemas/ServiceResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/CustomerDeleteResponse"
      x-api-wrapper: true
      x-api-wrapper-datatype: CustomerDeleteResponse
    ErrorItem:
      type: object
      additionalProperties: false
      description: Standard error item structure.
      properties:
        code:
          type: string
          description: Short application-specific error code.
        message:
          type: string
          description: Human-readable error message.
        field:
          type: string
          description: Field name when error is field-specific.
        resource:
          type: string
          description: Domain resource name if applicable.
        id:
          type: string
          description: Resource identifier if applicable.
      required:
        - code
        - message
    ProblemDetail:
      type: object
      additionalProperties: true
      properties:
        type:
          type: string
          format: uri
          description: Problem type as a URI.
        title:
          type: string
          description: "Short, human-readable summary of the problem type."
        status:
          type: integer
          format: int32
          description: HTTP status code for this problem.
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence.
        instance:
          type: string
          format: uri
          description: URI that identifies this specific occurrence.
        errorCode:
          type: string
          description: Application-specific error code.
        extensions:
          type: object
          additionalProperties: false
          description: Additional problem metadata.
          properties:
            errors:
              type: array
              description: List of error items (field-level or domain-specific).
              items:
                $ref: "#/components/schemas/ErrorItem"
    ServiceResponse:
      type: object
      properties:
        data:
          type: object
        meta:
          $ref: "#/components/schemas/Meta"
    ServiceResponseVoid:
      type: object
      properties:
        data:
          type: object
        meta:
          $ref: "#/components/schemas/Meta"
